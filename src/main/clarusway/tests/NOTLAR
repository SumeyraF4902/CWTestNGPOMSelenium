

                    HTML Reports
Raporlamanın amacı, iyi bir test raporunun projeniz için bir sağlık sertifikası görevi görmesidir.
Dependency pom.xml’e eklenir

ExtentReports, test otomasyonu için yararlı olan açık kaynaklı bir raporlama kütüphanesidir, extent report'a ilk atamayı
yaparak raporlamayı başlatır
ExtentHtmlReporter zengin bir bağımsız HTML dosyası oluşturur ayrıca config() yöntemi aracılığıyla çeşitli yapılandırma
seçeneklerine izin verir. Raporun oluşturulacağı yolu ayarlama, raporun görünümünü ve verdiği hissi değiştirmek için
rapor adı, zaman damgası vb. gibi yapılandırma öğeleri eklenebilir.
ExtentTest class, oluşturulan HTML raporuna test adımlarını kaydetmek için kullanılır.
PASS, FAIL, SKIP, INFO gibi.
Testde Rapor Oluşturma Adımları
1- Test class’ı extends ile TestBaseRepot Class’ına child yapma
2- Test class’ında rapor oluşturmak için extentTest = extentReports.createTest(“Testname”,“Description”);
3- Gerekli/istenilen satırlara → extentTest.info(“Açıklama”)
4- Assert olan satırda açıklama → extentTest.pass

Fail olan bir test raporu, fail
olunca screenshot alınabilir

LİSTENERS
TestNG raporlamasının ve loglarının default davranışını değiştirmek için kullanılır.
TestNG listenerlar; TestNG'de meydana gelen olayları dinleyen ve kodu yürüten kod parçalarıdır.
Başarısız test senaryolarının ekran görüntüsünü alırken ITestListener interface’sini kullanmıştık.
TestNG'de farklı türde dinleyiciler mevcuttur.
ITestListener, IReporter, ISuiteListener, IHookable, IExecutionListener, IConfigurable, IConfigurableListener
ITestListener → Class’a implement etmemiz gereken bir interfacedir, methodları vardır.
✓ onStart → Herhangi bir test yöntemi yürütülmeden önce çağrılır.
✓ onFinish → Tüm test yöntemleri yürütüldükten sonra çağrılır.
✓ onTestStart → Herhangi bir test yöntemi çağrılmadan önce çağrılır. Bu, herhangi bir test yönteminin başlatıldığını
belirtmek için kullanılabilir.
✓ onTestSkipped → Herhangi bir test yöntemi atlandığında bu yöntem çağrılır.
✓ onTestSuccess → Herhangi bir test yöntemi başarılı olduğunda bu yöntem çağrılır.
✓ onTestFailure → Herhangi bir test yöntemi başarısız olduğunda bu yöntem çağrılır

Listener Class’ı kullanırken rapor almak
istediğimiz class’da belirtmeliyiz.
Çalışılacak modül hangisi ise; onun XML sayfası RUN edilerek aktif hale getirilir.
Run Menüsünden → Edit configuration gidilir.
Soldaki bölümde TestNG başlığının altında çalışan modülümüzün aktif olduğu görülür.
Sonra sağdaki bölümden Listeners tıklanır.
Listeners’ın sağındaki + simgesine tıklanır.
Açılan listenin üstündeki search area ya"report" yazılarak arama yapılır.
"EmailableReporter (TestNG)" ve "FailedReporter" seçilerek OK basılır.
Test tekrar XML file’dan çalıştırılır.

UTİLS
Excel Util
Apache POI Library, Microsoft dosyalarıyla çalışmak için kullanılır.
Workbook > Sheet > Row > Cell
ExcelUtils
Data Driven Testing (DDT)
• Depolamadan girdi verilerinin alınması.
• Başvuru formuna veri girme.
• Sonuçların doğrulanması.
• Sonraki girdi verisi seti ile devam etme.
Reusable Methods
Framework’ümüzde utilities package altında sürekli kullanılabilecek methodları özel bir class olan
ReusableMethods class’ında toparlayabiliriz.
JS Utils
Yine aynı şekilde Framework’ümüzde utilities package altında sürekli kullanılabilecek JavaScriptExecutor
methodlarını özel bir class olan JSUtils classında toparlayabiliriz.

PAGE OBJECT
 /*

 Page Object Model /Pattern, Web UI elementleri için oluşturan,
 test otomasyonunda yaygın olarak kullanılan bir tasarım
 modelidir.
 Herbir web sayfası için page class’ı olmalı ve burada o sayfaya ait
 tüm WebElement’ler tanımlanmalıdır.
 Page Object Model’in uygulanması test objeleriyle test scriptlerini
 ayırmayı sağlar. Bu da birçok kolaylık ve avantaj sağlar.
 Page Factory Class; Selenium WebDriver tarafından Page Object
 Modelini uygulamak için kullanılan bir class’tı

 Niçin Page Object Model?
 ✓ Kod daha okunabilir ve anlaşılabilir bir modeldir.
 ✓ Büyüyen test paketinin bakımı daha kolaydır.
 ✓ Yeniden kullanılabilir(objects, classes, methods, data)
 ✓ Debugging daha kolay olması için bağımsız test senaryoları oluşturmamızı sağlar.
 ✓ Test execution süresini hızlandırır.
 ✓ Daha iyi, sürdürülebilir, daha hızlı ve anlaşılır olmasını sağlamak için tercih edilir.
        pageObject model kullandinmi nasil kullandin  neden kullandin diye sorarlarsa;
        pageObject model ; sayfalarimizin locate lerini bir arada tutmamizi saglayan bir konseptir
         kod tekrarini azaltma , okunabilirliigini attirma
         bakim maliyetini dusurmek adina kullanilir,
         Locaterlar tek elle tutulacagindan,
         ve herhangi bir degisiklikte tek bir classtaki degisiklik tum classlarimizida  etkileyeceginden,
          ve page objelerimizle yani sayfalardaki webelementlerlerimizle test methodlari arasinda bir ayrim olacagindan bakimi, okunabilirligi cok daha kolaydir
        bir dizayn patterdir ayrica
         */
         /*
         PAGEFACTORY CLASSI NEDIR NE İSE YARAR
         Selenium Page Factory Pattern, Page Object Model in bir uzantısı gibidir, ancak Page Factory çok gelişmiş bir modeldir.
         Factory class, Page Objects (Page Class) kullanımını daha basit ve kolay hale getirmek için kullanılabilir.
         Page Objects de tanımlanan WebElement’lerini başlatmak için Factory class Pattern kullanılır.
         PageFactory Class'tan initElements() methodunu kullanarak page class objelerini ilk değeri atamalıyız - başlatmalıyız.
         initElements() methodunu çağırdığımızda, tüm WebElement’ler başlatılacaktır.
         PageFactory.initElements() static methodu, verilen class’ın driver’ını alır ve alanları tam olarak başlatılmış bir page
         objesi return eder.



            SINGLETON DİZAYN PETTER NEDİR
            Kullanılan Driver Class, tüm sınıflarda paylaşılan tek bir statik driver döndürür.
            Driver Class, Framework’deki tüm class’larda aynı driver objesini kullanmamıza izin verecektir.
            Singleton Driver class başlatıldığında, bu Driver class tekrar tekrar aynı driver örneğini return eder.
            Singleton Pattern: Tekli kullanım, yalnızca örneği olabilecek şekilde geliştirilir, Singleton Driver kullanıcıyı WebDriver'ın
            gerekli olduğu tüm örnekler için aynı objeyi kullanmaya zorlayacaktır işte tam da bu yüzden Singleton Pattern bir
            classın farklı class’larda obje oluşturularak kullanımını engellemek için kullanılır.
            Amaç burada; Driver class’ındaki getDriver() method’unun obje oluşturularak kullanılmasını engellemektir.
            Singleton sınıfı oluşturmak için aşağıdaki adımları uygulamamız gerekiyor:
            1. Class’ta oluşturulan constructor private olmalı böylece farklı classlarda obje oluşturulamaz.
            2. Class’da statik bir referans variable olmalı; her yerden kullanılabilir hale getirmek için static gereklidir.
            3. Class’ın bir kez başlatılıp başlatılmadığını kontrol etmesi gereken, class’ın objesi olarak return type static bir method
            declare edilmelidir.

            Clasın tek objesiyle birlikte calisiyoruz, buyuzden baska obje uratilmesine izin verilmiyor. buda private consructor sayesinde oluyor. javanin
            runtime ile uretilen class disinda baska class kullanamiyoruz
                biz burada driver icin kullandık
Tüm browserlar için Driver class kullanımı daha etkindir.
Bunun için, driver objesini oluşturmadan önce, farklı browser
koşullarını kontrol etmek için switch statement kullanılabilir.
Wait’ler, maximize ve close; TestBase de olduğu gibi Driver
classa eklenir. Böylece TestBase classını kullanmamıza gerek
kalmaz.



         FİNDBY

           /* FİNDBy elementleri locate etmemizi saglayan anatasyondur
             @FindBy  -->Tekli kriter
             @FindBy(id ="A")
             private WebElement A; gibi


             @FindBys-->iki kriter --> iki sartıda saglamasi gerekir.  Webelement objelerinin verilen tum kriterlerle eslesmesi gerektiginde. javadaki  and operatoru gibi
             @FindBys({
             @FindBy(id ="A")  ,
             @FindBys(id ="B")}
             public WebElement AB; GİBİ

             @FindAll--> EN AZ BIR KRITER  java daki or operatoru gibi calisir

             @FindAll({
             @FindBy(id ="A")  ,
             ..........
             @FindBys(id ="B")}
             public  List<WebElement> AandB; GİBİ  Webelement objelerinin verilen kriterlerden enaz biriyle eslesmesi gerektiginde
              */

              ELEMENTLERİ LOCATE EDERKEN KULLANDIGIMIZ ANATASYONLAR
              FİNDBY
              FİNDBYS
              FİNDALL